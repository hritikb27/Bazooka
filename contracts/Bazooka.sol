//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
import "./VRF.sol";
import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";

contract Bazooka is VRF, KeeperCompatibleInterface {

    /**
    * Use an interval in seconds and a timestamp to slow execution of Upkeep
    */
    uint public immutable interval;
    uint public immutable interval2;
    uint public lastTimeStamp;
    uint public lastTimeStamp2;

    constructor(uint updateInterval, uint updateInterval2) VRF(321){
      interval = updateInterval;
      interval2 = updateInterval2;
      lastTimeStamp = block.timestamp;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval || (block.timestamp - lastTimeStamp2) > interval2;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function getOwner() public view returns (address) {
        return owner;
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp2 = block.timestamp;
            lastTimeStamp = block.timestamp;
            for(uint256 i=1; i<=battleID; i++){
                address payable owner1 = BattlesMapping[monthNo][i].nft1.ownerAddress;
                address payable owner2 = BattlesMapping[monthNo][i].nft2.ownerAddress;
                
                if((BattlesMapping[monthNo][i].votes1+BattlesMapping[monthNo][i].votes2) < uint256(1) || BattlesMapping[monthNo][i].votes1==BattlesMapping[monthNo][i].votes2){
                    uint256 amount = (uint256(BattlesMapping[monthNo][i].amount)/uint256(2));
                    owner1.transfer(amount);
                    owner2.transfer(amount);
                    continue;
                }
                uint256 _amount = (uint256(BattlesMapping[monthNo][i].amount)/uint256(5))*uint256(4);
                if(BattlesMapping[monthNo][i].votes1>BattlesMapping[monthNo][i].votes2){
                    owner1.transfer(_amount);
                    for(uint256 j=0; j<BattlesMapping[monthNo][i]._votes1.length; j++){
                        users[BattlesMapping[monthNo][i]._votes1[j]].canBattle = true;
                    }
                }
                else if(BattlesMapping[monthNo][i].votes1<BattlesMapping[monthNo][i].votes2){
                    owner2.transfer(_amount);
                    for(uint256 j=0; j<BattlesMapping[monthNo][i]._votes2.length; j++){
                        users[BattlesMapping[monthNo][i]._votes2[j]].canBattle = true;
                    }
                }
            }
            // requestRandomWords();
            battlesPaused = true;
        }
        if((block.timestamp - lastTimeStamp2) > interval2 ) {
            lastTimeStamp = block.timestamp;
            lastTimeStamp2 = block.timestamp + interval;
            battleIds[monthNo] = battleID;
            battlesPaused = false;
            monthNo += 1;
            battleID = 0;
            nftID = 0;
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }
}